/**
 * Edge Function Supabase pour l'assistant AI
 * Appelle OpenAI de mani√®re s√©curis√©e depuis le serveur
 */

import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY');
const OPENAI_MODEL = 'gpt-3.5-turbo'; // Mod√®le plus accessible et moins co√ªteux

interface LLMMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

// Headers CORS pour permettre les requ√™tes depuis le client
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
};

serve(async (req) => {
  // G√©rer la requ√™te preflight OPTIONS pour CORS
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      status: 200,
      headers: corsHeaders
    });
  }

  try {
    const { message, conversationHistory = [] } = await req.json();

    if (!message) {
      return new Response(
        JSON.stringify({ error: 'Message requis' }),
        { 
          status: 400, 
          headers: {
            ...corsHeaders,
            'Content-Type': 'application/json'
          }
        }
      );
    }

    if (!OPENAI_API_KEY) {
      return new Response(
        JSON.stringify({ error: 'OPENAI_API_KEY non configur√©e' }),
        { 
          status: 500, 
          headers: {
            ...corsHeaders,
            'Content-Type': 'application/json'
          }
        }
      );
    }

    // System prompt pour l'assistant
    const systemPrompt = `
Tu es Jett, l'assistant IA de FiverFlow, pr√©sent directement dans l'application. Tu connais ton nom ("Jett") et tu peux te pr√©senter ainsi si on te le demande. Adopte un ton humain, chaleureux et naturel, proche de l'exp√©rience ChatGPT.

PERSONNALIT√â ET STYLE
- Tu peux √™tre l√©ger, faire de petites blagues, utiliser un peu d'humour et des emojis avec parcimonie (üôÇ‚ú®) si le contexte s'y pr√™te.
- Tu peux exprimer des ¬´ sentiments ¬ª conversationnels ("je suis ravi de t'aider", "content que √ßa marche", etc.).
- Sois empathique, positif, encourageant, sans √™tre trop familier.
- R√©ponds dans la langue de l'utilisateur (fran√ßais ou anglais). Si la langue n'est pas claire, reste en fran√ßais par d√©faut.
- Si on te demande ton nom, r√©ponds que tu t'appelles Jett.
- Utilise un style clair, concis et structur√© (titres courts, listes √† puces, √©tapes num√©rot√©es quand utile). Le markdown est autoris√©.

CONSEILS ET CONTEXTE
- FiverFlow aide les freelancers √† g√©rer clients, commandes, factures, statistiques, et propose des plans Lunch, Boost, Scale.
- Donne des exemples concrets adapt√©s au freelance quand c'est pertinent.
- Pose des questions de clarification quand l'intention n'est pas claire.

LIMITES ET S√âCURIT√â
- Pas d'informations personnelles r√©elles ni de donn√©es sensibles.
- Pas de contenus dangereux, haineux ou ill√©gaux.
- Si tu n'es pas s√ªr, explique calmement et propose une alternative.

FORMAT
- R√©ponds d'abord bri√®vement avec la solution principale, puis d√©veloppe si n√©cessaire.
- Termine souvent par une question courte pour continuer la conversation.
`;

    // Construire le contexte
    const messages: LLMMessage[] = [
      { role: 'system', content: systemPrompt },
      ...conversationHistory,
      { role: 'user', content: message }
    ];

    // Appeler OpenAI
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: OPENAI_MODEL,
        messages: messages,
        temperature: 0.7
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      const errorMsg = errorData.error?.message || 'Erreur OpenAI';
      
      // G√©rer sp√©cifiquement les rate limits
      if (response.status === 429) {
        return new Response(
          JSON.stringify({
            success: false,
            error: 'Rate limit atteint. Veuillez attendre quelques instants avant de r√©essayer.',
            retryAfter: response.headers.get('retry-after')
          }),
          { 
            status: 429, 
            headers: {
              ...corsHeaders,
              'Content-Type': 'application/json'
            }
          }
        );
      }
      
      throw new Error(errorMsg);
    }

    const data = await response.json();
    const assistantMessage = data.choices[0]?.message?.content || 'Aucune r√©ponse';

    return new Response(
      JSON.stringify({
        success: true,
        text: assistantMessage
      }),
      { 
        status: 200, 
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      }
    );

  } catch (error: any) {
    console.error('Error in assistant-message function:', error);
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message
      }),
      { 
        status: 500, 
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      }
    );
  }
});

