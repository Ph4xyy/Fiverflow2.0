const cron = require('node-cron');
const { StatsManager } = require('./supabase');
const { EmbedBuilder } = require('discord.js');
const moment = require('moment-timezone');

function scheduleTasks(client) {
    const statsManager = new StatsManager(client.supabase);
    
    // Statistiques quotidiennes √† 9h00
    cron.schedule('0 9 * * *', async () => {
        if (!process.env.ENABLE_DAILY_STATS === 'true') return;
        
        try {
            console.log('üìä G√©n√©ration des statistiques quotidiennes...');
            await sendDailyStats(client, statsManager);
        } catch (error) {
            console.error('Erreur stats quotidiennes:', error);
        }
    }, {
        timezone: process.env.TIMEZONE || 'Europe/Paris'
    });
    
    // Statistiques hebdomadaires le dimanche √† 10h00
    cron.schedule('0 10 * * 0', async () => {
        try {
            console.log('üìà G√©n√©ration des statistiques hebdomadaires...');
            await sendWeeklyStats(client, statsManager);
        } catch (error) {
            console.error('Erreur stats hebdomadaires:', error);
        }
    }, {
        timezone: process.env.TIMEZONE || 'Europe/Paris'
    });
    
    // V√©rification des erreurs toutes les heures
    cron.schedule('0 * * * *', async () => {
        try {
            await checkForErrors(client);
        } catch (error) {
            console.error('Erreur v√©rification erreurs:', error);
        }
    });
    
    console.log('‚è∞ T√¢ches programm√©es configur√©es');
}

async function sendDailyStats(client, statsManager) {
    const statsChannel = client.channels.cache.get(client.config.statsChannelId);
    if (!statsChannel) return;
    
    const stats = await statsManager.getGeneralStats();
    if (!stats) return;
    
    const embed = new EmbedBuilder()
        .setColor('#9c68f2')
        .setTitle('üìä Statistiques Quotidiennes FiverFlow')
        .setDescription(`Donn√©es du ${moment().tz(process.env.TIMEZONE || 'Europe/Paris').format('DD/MM/YYYY')}`)
        .addFields(
            { name: 'üë• Utilisateurs Totaux', value: stats.totalUsers.toString(), inline: true },
            { name: 'üÜï Nouveaux Cette Semaine', value: stats.newUsersThisWeek.toString(), inline: true },
            { name: 'üí≥ Abonnements Actifs', value: stats.activeSubscriptions.toString(), inline: true },
            { name: 'ü•™ Lunch', value: stats.lunchUsers.toString(), inline: true },
            { name: 'üöÄ Boost', value: stats.boostUsers.toString(), inline: true },
            { name: 'üìà Scale', value: stats.scaleUsers.toString(), inline: true }
        )
        .setFooter({ text: 'FiverFlow Bot ‚Ä¢ Statistiques automatiques' })
        .setTimestamp();
    
    await statsChannel.send({ embeds: [embed] });
}

async function sendWeeklyStats(client, statsManager) {
    const statsChannel = client.channels.cache.get(client.config.statsChannelId);
    if (!statsChannel) return;
    
    const [generalStats, ordersStats, recentUsers] = await Promise.all([
        statsManager.getGeneralStats(),
        statsManager.getOrdersStats(),
        statsManager.getRecentUsers(10)
    ]);
    
    if (!generalStats) return;
    
    const embed = new EmbedBuilder()
        .setColor('#ff6b35')
        .setTitle('üìà Rapport Hebdomadaire FiverFlow')
        .setDescription(`Semaine du ${moment().subtract(7, 'days').format('DD/MM')} au ${moment().format('DD/MM/YYYY')}`)
        .addFields(
            { name: 'üë• Utilisateurs Totaux', value: generalStats.totalUsers.toString(), inline: true },
            { name: 'üÜï Nouveaux Utilisateurs', value: generalStats.newUsersThisWeek.toString(), inline: true },
            { name: 'üí≥ Abonnements Actifs', value: generalStats.activeSubscriptions.toString(), inline: true }
        );
    
    if (ordersStats) {
        embed.addFields(
            { name: 'üì¶ Commandes Totales', value: ordersStats.totalOrders.toString(), inline: true },
            { name: '‚úÖ Commandes Termin√©es', value: ordersStats.completedOrders.toString(), inline: true },
            { name: 'üí∞ Revenus Totaux', value: `$${ordersStats.totalRevenue.toFixed(2)}`, inline: true }
        );
    }
    
    if (recentUsers && recentUsers.length > 0) {
        const recentUsersList = recentUsers.map(user => 
            `‚Ä¢ **${user.username}** (${user.subscription})`
        ).join('\n');
        
        embed.addFields({
            name: 'üÜï Nouveaux Utilisateurs',
            value: recentUsersList.substring(0, 1024), // Limite Discord
            inline: false
        });
    }
    
    embed.setFooter({ text: 'FiverFlow Bot ‚Ä¢ Rapport hebdomadaire' })
         .setTimestamp();
    
    await statsChannel.send({ embeds: [embed] });
}

async function checkForErrors(client) {
    // Ici vous pouvez ajouter des v√©rifications d'erreurs sp√©cifiques
    // Par exemple, v√©rifier les logs d'erreur, les services down, etc.
    
    const errorChannel = client.channels.cache.get(client.config.errorsChannelId);
    if (!errorChannel) return;
    
    // Exemple de v√©rification (√† adapter selon vos besoins)
    const errorCount = 0; // R√©cup√©rer depuis vos logs
    
    if (errorCount > 10) { // Seuil d'erreur
        const embed = new EmbedBuilder()
            .setColor('#ff0000')
            .setTitle('‚ö†Ô∏è Alerte Erreurs')
            .setDescription(`${errorCount} erreurs d√©tect√©es dans la derni√®re heure`)
            .setTimestamp();
            
        await errorChannel.send({ embeds: [embed] });
    }
}

module.exports = { scheduleTasks };
