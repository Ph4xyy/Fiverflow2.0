# Script de test pour v√©rifier le syst√®me d'inscription
# Ce script teste la cr√©ation d'utilisateur et v√©rifie que tous les triggers fonctionnent

Write-Host "üîß Test du syst√®me d'inscription - FiverFlow" -ForegroundColor Cyan
Write-Host "===============================================" -ForegroundColor Cyan

# Configuration Supabase
$supabaseUrl = "https://your-project.supabase.co"
$supabaseKey = "your-anon-key"

# Fonction pour tester l'inscription
function Test-UserSignup {
    param(
        [string]$email,
        [string]$password,
        [string]$firstName = "Test",
        [string]$lastName = "User"
    )
    
    Write-Host "`nüß™ Test d'inscription pour: $email" -ForegroundColor Yellow
    
    try {
        # Appel √† l'API Supabase Auth
        $signupData = @{
            email = $email
            password = $password
            data = @{
                first_name = $firstName
                last_name = $lastName
                full_name = "$firstName $lastName"
            }
        } | ConvertTo-Json -Depth 3
        
        $headers = @{
            "Content-Type" = "application/json"
            "apikey" = $supabaseKey
        }
        
        $response = Invoke-RestMethod -Uri "$supabaseUrl/auth/v1/signup" -Method Post -Body $signupData -Headers $headers
        
        if ($response.user) {
            Write-Host "‚úÖ Inscription r√©ussie!" -ForegroundColor Green
            Write-Host "   User ID: $($response.user.id)" -ForegroundColor Gray
            Write-Host "   Email: $($response.user.email)" -ForegroundColor Gray
            
            # V√©rifier que le profil a √©t√© cr√©√©
            Start-Sleep -Seconds 2
            Test-UserProfile -userId $response.user.id
            
            return $response.user
        } else {
            Write-Host "‚ùå √âchec de l'inscription" -ForegroundColor Red
            return $null
        }
    }
    catch {
        Write-Host "‚ùå Erreur lors de l'inscription: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# Fonction pour v√©rifier le profil utilisateur
function Test-UserProfile {
    param([string]$userId)
    
    Write-Host "`nüîç V√©rification du profil utilisateur..." -ForegroundColor Yellow
    
    try {
        $headers = @{
            "apikey" = $supabaseKey
        }
        
        # V√©rifier le profil dans user_profiles
        $profileResponse = Invoke-RestMethod -Uri "$supabaseUrl/rest/v1/user_profiles?user_id=eq.$userId" -Method Get -Headers $headers
        
        if ($profileResponse.Count -gt 0) {
            $profile = $profileResponse[0]
            Write-Host "‚úÖ Profil cr√©√© avec succ√®s!" -ForegroundColor Green
            Write-Host "   Nom: $($profile.full_name)" -ForegroundColor Gray
            Write-Host "   Email: $($profile.email)" -ForegroundColor Gray
            Write-Host "   Admin: $($profile.is_admin)" -ForegroundColor Gray
            Write-Host "   Actif: $($profile.is_active)" -ForegroundColor Gray
            
            # V√©rifier l'abonnement
            Test-UserSubscription -userId $userId
            
            # V√©rifier le r√¥le
            Test-UserRole -userId $userId
            
        } else {
            Write-Host "‚ùå Aucun profil trouv√© pour l'utilisateur" -ForegroundColor Red
        }
    }
    catch {
        Write-Host "‚ùå Erreur lors de la v√©rification du profil: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Fonction pour v√©rifier l'abonnement utilisateur
function Test-UserSubscription {
    param([string]$userId)
    
    Write-Host "`nüí≥ V√©rification de l'abonnement..." -ForegroundColor Yellow
    
    try {
        $headers = @{
            "apikey" = $supabaseKey
        }
        
        $subscriptionResponse = Invoke-RestMethod -Uri "$supabaseUrl/rest/v1/user_subscriptions?user_id=eq.$userId" -Method Get -Headers $headers
        
        if ($subscriptionResponse.Count -gt 0) {
            $subscription = $subscriptionResponse[0]
            Write-Host "‚úÖ Abonnement cr√©√© avec succ√®s!" -ForegroundColor Green
            Write-Host "   Statut: $($subscription.status)" -ForegroundColor Gray
            Write-Host "   Cycle: $($subscription.billing_cycle)" -ForegroundColor Gray
            Write-Host "   Montant: $($subscription.amount)" -ForegroundColor Gray
        } else {
            Write-Host "‚ùå Aucun abonnement trouv√© pour l'utilisateur" -ForegroundColor Red
        }
    }
    catch {
        Write-Host "‚ùå Erreur lors de la v√©rification de l'abonnement: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Fonction pour v√©rifier le r√¥le utilisateur
function Test-UserRole {
    param([string]$userId)
    
    Write-Host "`nüë§ V√©rification du r√¥le utilisateur..." -ForegroundColor Yellow
    
    try {
        $headers = @{
            "apikey" = $supabaseKey
        }
        
        $roleResponse = Invoke-RestMethod -Uri "$supabaseUrl/rest/v1/user_roles?user_id=eq.$userId" -Method Get -Headers $headers
        
        if ($roleResponse.Count -gt 0) {
            $role = $roleResponse[0]
            Write-Host "‚úÖ R√¥le cr√©√© avec succ√®s!" -ForegroundColor Green
            Write-Host "   R√¥le ID: $($role.role_id)" -ForegroundColor Gray
            Write-Host "   Assign√© le: $($role.assigned_at)" -ForegroundColor Gray
        } else {
            Write-Host "‚ùå Aucun r√¥le trouv√© pour l'utilisateur" -ForegroundColor Red
        }
    }
    catch {
        Write-Host "‚ùå Erreur lors de la v√©rification du r√¥le: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Fonction pour nettoyer les donn√©es de test
function Cleanup-TestData {
    param([string]$email)
    
    Write-Host "`nüßπ Nettoyage des donn√©es de test..." -ForegroundColor Yellow
    
    try {
        # Note: Dans un vrai environnement, vous devriez supprimer l'utilisateur via l'API Admin
        # ou utiliser une base de donn√©es de test s√©par√©e
        Write-Host "‚ö†Ô∏è  Nettoyage manuel requis pour l'email: $email" -ForegroundColor Yellow
        Write-Host "   - Supprimer l'utilisateur dans le dashboard Supabase" -ForegroundColor Gray
        Write-Host "   - Ou utiliser l'API Admin pour supprimer l'utilisateur" -ForegroundColor Gray
    }
    catch {
        Write-Host "‚ùå Erreur lors du nettoyage: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Tests principaux
Write-Host "`nüöÄ D√©marrage des tests d'inscription..." -ForegroundColor Cyan

# Test 1: Inscription normale
$testEmail1 = "test-signup-$(Get-Date -Format 'yyyyMMdd-HHmmss')@example.com"
$testUser1 = Test-UserSignup -email $testEmail1 -password "TestPassword123!" -firstName "Test" -lastName "User"

# Test 2: Inscription avec donn√©es compl√®tes
$testEmail2 = "test-signup-full-$(Get-Date -Format 'yyyyMMdd-HHmmss')@example.com"
$testUser2 = Test-UserSignup -email $testEmail2 -password "TestPassword123!" -firstName "John" -lastName "Doe"

# R√©sum√© des tests
Write-Host "`nüìä R√©sum√© des tests:" -ForegroundColor Cyan
Write-Host "===================" -ForegroundColor Cyan

if ($testUser1) {
    Write-Host "‚úÖ Test 1 (inscription normale): R√âUSSI" -ForegroundColor Green
} else {
    Write-Host "‚ùå Test 1 (inscription normale): √âCHEC" -ForegroundColor Red
}

if ($testUser2) {
    Write-Host "‚úÖ Test 2 (inscription compl√®te): R√âUSSI" -ForegroundColor Green
} else {
    Write-Host "‚ùå Test 2 (inscription compl√®te): √âCHEC" -ForegroundColor Red
}

# Nettoyage
Write-Host "`nüßπ Nettoyage des donn√©es de test..." -ForegroundColor Yellow
Cleanup-TestData -email $testEmail1
Cleanup-TestData -email $testEmail2

Write-Host "`n‚ú® Tests termin√©s!" -ForegroundColor Cyan
Write-Host "Si tous les tests sont r√©ussis, le syst√®me d'inscription fonctionne correctement." -ForegroundColor Green
Write-Host "Si des tests √©chouent, v√©rifiez les logs Supabase et les migrations." -ForegroundColor Yellow
