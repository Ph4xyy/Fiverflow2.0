# Script de test pour v√©rifier la correction de l'erreur PGRST116
# Test de la v√©rification admin sans erreur

Write-Host "üß™ Test de la correction de l'erreur PGRST116" -ForegroundColor Cyan
Write-Host "===============================================" -ForegroundColor Cyan

# V√©rifier que Supabase est configur√©
Write-Host "`n1. V√©rification de la configuration Supabase..." -ForegroundColor Yellow

$envFile = ".env.local"
if (Test-Path $envFile) {
    Write-Host "‚úÖ Fichier .env.local trouv√©" -ForegroundColor Green
    $envContent = Get-Content $envFile
    $hasUrl = $envContent | Where-Object { $_ -match "VITE_SUPABASE_URL" }
    $hasKey = $envContent | Where-Object { $_ -match "VITE_SUPABASE_ANON_KEY" }
    
    if ($hasUrl -and $hasKey) {
        Write-Host "‚úÖ Variables d'environnement Supabase configur√©es" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Variables d'environnement Supabase manquantes" -ForegroundColor Red
        Write-Host "   VITE_SUPABASE_URL: $($hasUrl -ne $null)" -ForegroundColor Gray
        Write-Host "   VITE_SUPABASE_ANON_KEY: $($hasKey -ne $null)" -ForegroundColor Gray
    }
} else {
    Write-Host "‚ùå Fichier .env.local non trouv√©" -ForegroundColor Red
}

# V√©rifier les modifications apport√©es
Write-Host "`n2. V√©rification des modifications du code..." -ForegroundColor Yellow

$adminDashboardFile = "src/pages/AdminDashboard.tsx"
$layoutFile = "src/components/Layout.tsx"

if (Test-Path $adminDashboardFile) {
    $adminContent = Get-Content $adminDashboardFile -Raw
    if ($adminContent -match "Utiliser une requ√™te sans \.single\(\) pour √©viter l'erreur PGRST116") {
        Write-Host "‚úÖ AdminDashboard.tsx - Correction PGRST116 appliqu√©e" -ForegroundColor Green
    } else {
        Write-Host "‚ùå AdminDashboard.tsx - Correction PGRST116 non trouv√©e" -ForegroundColor Red
    }
    
    if ($adminContent -match "if \(!supabase\)") {
        Write-Host "‚úÖ AdminDashboard.tsx - V√©rification null ajout√©e" -ForegroundColor Green
    } else {
        Write-Host "‚ùå AdminDashboard.tsx - V√©rification null manquante" -ForegroundColor Red
    }
} else {
    Write-Host "‚ùå Fichier AdminDashboard.tsx non trouv√©" -ForegroundColor Red
}

if (Test-Path $layoutFile) {
    $layoutContent = Get-Content $layoutFile -Raw
    if ($layoutContent -match "Utiliser une requ√™te sans \.single\(\) pour √©viter l'erreur PGRST116") {
        Write-Host "‚úÖ Layout.tsx - Correction PGRST116 appliqu√©e" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Layout.tsx - Correction PGRST116 non trouv√©e" -ForegroundColor Red
    }
    
    if ($layoutContent -match "if \(!supabase\)") {
        Write-Host "‚úÖ Layout.tsx - V√©rification null ajout√©e" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Layout.tsx - V√©rification null manquante" -ForegroundColor Red
    }
} else {
    Write-Host "‚ùå Fichier Layout.tsx non trouv√©" -ForegroundColor Red
}

# V√©rifier la structure de la base de donn√©es
Write-Host "`n3. V√©rification de la structure de la base de donn√©es..." -ForegroundColor Yellow

$migrationFiles = Get-ChildItem "supabase/migrations" -Filter "*.sql" | Sort-Object Name
$hasUserProfiles = $false
$hasAdminSupport = $false

foreach ($file in $migrationFiles) {
    $content = Get-Content $file.FullName -Raw
    if ($content -match "CREATE TABLE user_profiles") {
        $hasUserProfiles = $true
        Write-Host "‚úÖ Table user_profiles trouv√©e dans $($file.Name)" -ForegroundColor Green
    }
    if ($content -match "is_admin") {
        $hasAdminSupport = $true
        Write-Host "‚úÖ Support admin trouv√© dans $($file.Name)" -ForegroundColor Green
    }
}

if (-not $hasUserProfiles) {
    Write-Host "‚ùå Table user_profiles non trouv√©e dans les migrations" -ForegroundColor Red
}
if (-not $hasAdminSupport) {
    Write-Host "‚ùå Support admin non trouv√© dans les migrations" -ForegroundColor Red
}

# Instructions de test
Write-Host "`n4. Instructions de test..." -ForegroundColor Yellow
Write-Host "Pour tester la correction:" -ForegroundColor White
Write-Host "1. D√©marrez l'application: npm run dev" -ForegroundColor Gray
Write-Host "2. Connectez-vous avec un compte admin" -ForegroundColor Gray
Write-Host "3. Naviguez vers /admin/dashboard" -ForegroundColor Gray
Write-Host "4. V√©rifiez qu'il n'y a plus d'erreur PGRST116 dans la console" -ForegroundColor Gray
Write-Host "5. V√©rifiez que le dashboard admin s'affiche correctement" -ForegroundColor Gray

Write-Host "`n5. R√©sum√© des corrections apport√©es:" -ForegroundColor Yellow
Write-Host "‚úÖ Suppression de .single() dans les requ√™tes admin" -ForegroundColor Green
Write-Host "‚úÖ Gestion du cas o√π l'utilisateur n'existe pas dans user_profiles" -ForegroundColor Green
Write-Host "‚úÖ V√©rification de null pour le client Supabase" -ForegroundColor Green
Write-Host "‚úÖ Messages de log am√©lior√©s pour le debugging" -ForegroundColor Green

Write-Host "`nüéØ La correction devrait r√©soudre l'erreur PGRST116!" -ForegroundColor Cyan
Write-Host "L'erreur se produisait car .single() s'attendait √† trouver exactement une ligne," -ForegroundColor White
Write-Host "mais l'utilisateur n'avait pas de profil dans user_profiles." -ForegroundColor White
Write-Host "Maintenant, la requ√™te g√®re correctement le cas o√π aucun profil n'existe." -ForegroundColor White
