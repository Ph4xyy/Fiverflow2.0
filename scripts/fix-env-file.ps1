# Script pour cr√©er et diagnostiquer le fichier .env.local
# R√©sout l'erreur "unexpected character '#' in variable name"

Write-Host "üîß Cr√©ation et Diagnostic du fichier .env.local" -ForegroundColor Cyan
Write-Host "===============================================" -ForegroundColor Cyan

# 1. V√©rifier si le fichier .env.local existe
if (Test-Path ".env.local") {
    Write-Host "`n‚ö†Ô∏è  Le fichier .env.local existe d√©j√†" -ForegroundColor Yellow
    Write-Host "   Sauvegarde en cours..." -ForegroundColor Gray
    
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    Copy-Item ".env.local" ".env.local.backup.$timestamp"
    Write-Host "   ‚úÖ Sauvegarde cr√©√©e: .env.local.backup.$timestamp" -ForegroundColor Green
}

# 2. Cr√©er le fichier .env.local √† partir de env.example
Write-Host "`nüìù Cr√©ation du fichier .env.local..." -ForegroundColor Yellow

if (Test-Path "env.example") {
    Copy-Item "env.example" ".env.local"
    Write-Host "   ‚úÖ Fichier .env.local cr√©√© √† partir de env.example" -ForegroundColor Green
} else {
    Write-Host "   ‚ùå Le fichier env.example n'existe pas!" -ForegroundColor Red
    exit 1
}

# 3. V√©rifier le contenu du fichier cr√©√©
Write-Host "`nüîç V√©rification du contenu du fichier .env.local..." -ForegroundColor Yellow

$envContent = Get-Content ".env.local"
$lineNumber = 0
$hasErrors = $false

foreach ($line in $envContent) {
    $lineNumber++
    
    # Ignorer les lignes vides et les commentaires
    if ($line.Trim() -eq "" -or $line.Trim().StartsWith("#")) {
        continue
    }
    
    # V√©rifier le format des variables d'environnement
    if ($line -match "^([A-Za-z_][A-Za-z0-9_]*)=(.*)$") {
        $varName = $matches[1]
        $varValue = $matches[2]
        
        # V√©rifier s'il y a des caract√®res probl√©matiques dans le nom
        if ($varName -match "[#\s]") {
            Write-Host "   ‚ùå Ligne $lineNumber : Nom de variable invalide '$varName'" -ForegroundColor Red
            Write-Host "      Contient des caract√®res interdits: # ou espaces" -ForegroundColor Red
            $hasErrors = $true
        } else {
            Write-Host "   ‚úÖ Ligne $lineNumber : $varName" -ForegroundColor Green
        }
        
        # V√©rifier les valeurs qui pourraient causer des probl√®mes
        if ($varValue -match "^pk_live_|^sk-proj-") {
            Write-Host "   ‚ö†Ô∏è  Ligne $lineNumber : Cl√© API sensible d√©tect√©e" -ForegroundColor Yellow
        }
    } else {
        Write-Host "   ‚ùå Ligne $lineNumber : Format invalide '$line'" -ForegroundColor Red
        $hasErrors = $true
    }
}

# 4. R√©sum√©
Write-Host "`nüìä R√©sum√© du diagnostic:" -ForegroundColor Cyan

if ($hasErrors) {
    Write-Host "   ‚ùå Des erreurs ont √©t√© d√©tect√©es dans le fichier .env.local" -ForegroundColor Red
    Write-Host "   üîß Correction automatique en cours..." -ForegroundColor Yellow
    
    # Corriger les erreurs communes
    $correctedContent = @()
    foreach ($line in $envContent) {
        if ($line.Trim() -eq "" -or $line.Trim().StartsWith("#")) {
            $correctedContent += $line
        } elseif ($line -match "^([A-Za-z_][A-Za-z0-9_]*)=(.*)$") {
            $correctedContent += $line
        } else {
            # Essayer de corriger les lignes probl√©matiques
            $correctedLine = $line -replace "[#\s]", "_"
            Write-Host "   üîß Ligne corrig√©e: '$line' -> '$correctedLine'" -ForegroundColor Blue
            $correctedContent += $correctedLine
        }
    }
    
    # Sauvegarder le fichier corrig√©
    $correctedContent | Out-File ".env.local" -Encoding UTF8
    Write-Host "   ‚úÖ Fichier .env.local corrig√© et sauvegard√©" -ForegroundColor Green
} else {
    Write-Host "   ‚úÖ Aucune erreur d√©tect√©e dans le fichier .env.local" -ForegroundColor Green
}

# 5. Instructions pour tester
Write-Host "`nüß™ Instructions pour tester:" -ForegroundColor Cyan
Write-Host "   1. Ex√©cutez: npm run dev" -ForegroundColor White
Write-Host "   2. V√©rifiez que l'application se lance sans erreur" -ForegroundColor White
Write-Host "   3. Si l'erreur persiste, v√©rifiez les logs de Vite" -ForegroundColor White

# 6. Commandes utiles
Write-Host "`nüõ†Ô∏è  Commandes utiles:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Voir le contenu: Get-Content .env.local" -ForegroundColor White
Write-Host "   ‚Ä¢ V√©rifier les variables: npm run build" -ForegroundColor White
Write-Host "   ‚Ä¢ Nettoyer le cache: npm run clean" -ForegroundColor White

Write-Host "`n‚úÖ Script termin√©!" -ForegroundColor Green