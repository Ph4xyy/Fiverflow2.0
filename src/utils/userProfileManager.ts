import { supabase } from '../lib/supabase';

interface UserProfile {
  id: string;
  user_id: string;
  full_name: string | null;
  email: string | null;
  is_admin: boolean;
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

interface User {
  id: string;
  email?: string;
  user_metadata?: {
    full_name?: string;
    is_admin?: boolean;
  };
}

/**
 * G√®re les profils utilisateurs avec logique JS directe (sans RPC)
 */
export class UserProfileManager {
  
  /**
   * V√©rifie si un profil utilisateur existe
   */
  static async checkProfileExists(userId: string): Promise<UserProfile | null> {
    if (!supabase) {
      console.error('‚ùå Supabase client non initialis√©');
      return null;
    }

    try {
      const { data, error } = await supabase
        .from('user_profiles')
        .select('*')
        .eq('user_id', userId)
        .single();

      if (error) {
        if (error.code === 'PGRST116') {
          // Profil non trouv√©
          return null;
        }
        console.error('‚ùå Erreur lors de la v√©rification du profil:', error);
        return null;
      }

      return data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification du profil:', error);
      return null;
    }
  }

  /**
   * Cr√©e un nouveau profil utilisateur
   */
  static async createProfile(user: User): Promise<UserProfile | null> {
    if (!supabase) {
      console.error('‚ùå Supabase client non initialis√©');
      return null;
    }

    try {
      const profileData = {
        user_id: user.id,
        full_name: user.user_metadata?.full_name || user.email?.split('@')[0] || 'Utilisateur',
        email: user.email || '',
        is_admin: user.user_metadata?.is_admin || false,
        is_active: true
      };

      console.log('üîç Cr√©ation du profil:', profileData);

      const { data, error } = await supabase
        .from('user_profiles')
        .insert(profileData)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Erreur lors de la cr√©ation du profil:', error);
        return null;
      }

      console.log('‚úÖ Profil cr√©√© avec succ√®s:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation du profil:', error);
      return null;
    }
  }

  /**
   * Met √† jour un profil utilisateur existant
   */
  static async updateProfile(userId: string, updates: Partial<UserProfile>): Promise<UserProfile | null> {
    if (!supabase) {
      console.error('‚ùå Supabase client non initialis√©');
      return null;
    }

    try {
      const { data, error } = await supabase
        .from('user_profiles')
        .update({
          ...updates,
          updated_at: new Date().toISOString()
        })
        .eq('user_id', userId)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Erreur lors de la mise √† jour du profil:', error);
        return null;
      }

      console.log('‚úÖ Profil mis √† jour:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour du profil:', error);
      return null;
    }
  }

  /**
   * G√®re un profil utilisateur (v√©rifie, cr√©e ou met √† jour)
   */
  static async ensureProfile(user: User): Promise<UserProfile | null> {
    console.log('üîç V√©rification/assurance du profil pour user:', user.id);

    // 1. V√©rifier si le profil existe
    const existingProfile = await this.checkProfileExists(user.id);
    
    if (existingProfile) {
      console.log('‚úÖ Profil existant trouv√©:', existingProfile);
      
      // V√©rifier si une mise √† jour est n√©cessaire
      const needsUpdate = 
        existingProfile.full_name !== (user.user_metadata?.full_name || user.email?.split('@')[0] || 'Utilisateur') ||
        existingProfile.email !== user.email ||
        existingProfile.is_admin !== (user.user_metadata?.is_admin || false);

      if (needsUpdate) {
        console.log('üîÑ Mise √† jour du profil n√©cessaire');
        return await this.updateProfile(user.id, {
          full_name: user.user_metadata?.full_name || user.email?.split('@')[0] || 'Utilisateur',
          email: user.email || '',
          is_admin: user.user_metadata?.is_admin || false
        });
      }

      return existingProfile;
    } else {
      console.log('üÜï Profil non trouv√©, cr√©ation...');
      return await this.createProfile(user);
    }
  }

  /**
   * V√©rifie le statut admin d'un utilisateur
   */
  static async checkAdminStatus(user: User): Promise<boolean> {
    console.log('üîç V√©rification du statut admin pour user:', user.id);

    // 1. V√©rifier d'abord les m√©tadonn√©es utilisateur (le plus rapide)
    if (user.user_metadata?.is_admin === true) {
      console.log('‚úÖ Admin d√©tect√© via m√©tadonn√©es utilisateur');
      return true;
    }

    // 2. V√©rifier dans la base de donn√©es
    const profile = await this.checkProfileExists(user.id);
    
    if (profile) {
      console.log('üîç Statut admin dans la base:', profile.is_admin);
      return profile.is_admin;
    }

    // 3. Si pas de profil, cr√©er un profil par d√©faut (non-admin)
    console.log('üÜï Pas de profil, cr√©ation d\'un profil par d√©faut');
    const newProfile = await this.createProfile(user);
    
    return newProfile?.is_admin || false;
  }

  /**
   * Promouvoir un utilisateur en admin
   */
  static async promoteToAdmin(userId: string): Promise<boolean> {
    if (!supabase) {
      console.error('‚ùå Supabase client non initialis√©');
      return false;
    }

    try {
      const { error } = await supabase
        .from('user_profiles')
        .update({ 
          is_admin: true,
          updated_at: new Date().toISOString()
        })
        .eq('user_id', userId);

      if (error) {
        console.error('‚ùå Erreur lors de la promotion admin:', error);
        return false;
      }

      console.log('‚úÖ Utilisateur promu administrateur');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors de la promotion admin:', error);
      return false;
    }
  }

  /**
   * R√©trograder un utilisateur (enlever admin)
   */
  static async demoteFromAdmin(userId: string): Promise<boolean> {
    if (!supabase) {
      console.error('‚ùå Supabase client non initialis√©');
      return false;
    }

    try {
      const { error } = await supabase
        .from('user_profiles')
        .update({ 
          is_admin: false,
          updated_at: new Date().toISOString()
        })
        .eq('user_id', userId);

      if (error) {
        console.error('‚ùå Erreur lors de la r√©trogradation:', error);
        return false;
      }

      console.log('‚úÖ Utilisateur r√©trograd√©');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©trogradation:', error);
      return false;
    }
  }
}

export default UserProfileManager;
