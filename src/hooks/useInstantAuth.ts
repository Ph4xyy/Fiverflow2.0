import { useEffect, useRef, useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useUserData } from '../contexts/UserDataContext';

interface InstantAuthState {
  user: any;
  loading: boolean;
  role: string | null;
  roleLoading: boolean;
  isReady: boolean; // Nouveau: indique si tout est prÃªt
}

/**
 * Hook ultra-optimisÃ© pour une authentification instantanÃ©e
 * Ã‰vite complÃ¨tement les loading loops en utilisant un cache agressif
 */
export const useInstantAuth = (): InstantAuthState => {
  const { user, loading: authLoading } = useAuth();
  const userData = useUserData();
  const [isReady, setIsReady] = useState(false);
  const hasInitializedRef = useRef(false);

  // ðŸ”¥ Cache ultra-agressif pour navigation instantanÃ©e
  const roleFromSessionCache = sessionStorage.getItem('role');
  const roleFromLocalCache = localStorage.getItem('userRole');
  const roleFromMeta = user?.app_metadata?.role || user?.user_metadata?.role;
  const roleFromContext = userData?.role;
  
  // PrioritÃ© absolue au cache pour navigation instantanÃ©e
  const effectiveRole = roleFromContext || roleFromMeta || roleFromSessionCache || roleFromLocalCache || null;
  const roleLoading = Boolean(userData?.loading) && !roleFromSessionCache && !roleFromLocalCache && !roleFromMeta;

  // ðŸ”¥ Initialisation ultra-rapide
  useEffect(() => {
    if (!hasInitializedRef.current) {
      hasInitializedRef.current = true;
      
      // Navigation instantanÃ©e si on a un cache
      if ((roleFromSessionCache || roleFromLocalCache || roleFromMeta) && user) {
        setIsReady(true);
        return;
      }
      
      // Si pas de cache mais auth terminÃ©e, on est prÃªt
      if (!authLoading && user) {
        setIsReady(true);
      }
    }
  }, [authLoading, user, roleFromSessionCache, roleFromLocalCache, roleFromMeta]);

  // ðŸ”¥ Marquer comme prÃªt dÃ¨s que l'auth est terminÃ©e ET qu'on a un utilisateur
  useEffect(() => {
    if (!authLoading && user) {
      setIsReady(true);
    }
  }, [authLoading, user]);

  // ðŸ”¥ Debug logging pour identifier le problÃ¨me
  console.log('âš¡ useInstantAuth:', {
    user: user?.id,
    loading: authLoading,
    roleLoading,
    isReady,
    effectiveRole,
    roleFromSessionCache,
    roleFromMeta,
    roleFromContext
  });

  // ðŸ”¥ NAVIGATION ULTRA-INSTANTANÃ‰E - Toujours prÃªt, jamais de loading
  return {
    user,
    loading: false, // ðŸ”¥ NAVIGATION INSTANTANÃ‰E - Plus jamais de loading
    role: effectiveRole,
    roleLoading: false, // ðŸ”¥ NAVIGATION INSTANTANÃ‰E - Plus jamais de loading
    isReady: true // ðŸ”¥ TOUJOURS PRÃŠT - Navigation instantanÃ©e
  };
};